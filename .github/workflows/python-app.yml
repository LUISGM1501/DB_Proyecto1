name: Docker Build and Python Tests

on:
  push:
    branches:
      - Andres2
  pull_request:
    branches:
      - Andres2

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v4

      # Step 3: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose -y

      # Step 4: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v4
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Set environment variables
      - name: Set Environment Variables
        run: |
          echo DB_HOST_POSTGRES=${{ secrets.DB_HOST_POSTGRES }} >> $GITHUB_ENV
          echo DB_PORT_POSTGRES=${{ secrets.DB_PORT_POSTGRES }} >> $GITHUB_ENV
          echo DB_HOST_MONGO=${{ secrets.DB_HOST_MONGO }} >> $GITHUB_ENV
          echo DB_PORT_MONGO=${{ secrets.DB_PORT_MONGO }} >> $GITHUB_ENV
          echo DB_USER=${{ secrets.DB_USER }} >> $GITHUB_ENV
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> $GITHUB_ENV
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> $GITHUB_ENV
          echo REDIS_HOST=${{ secrets.REDIS_HOST }} >> $GITHUB_ENV
          echo REDIS_PORT=${{ secrets.REDIS_PORT }} >> $GITHUB_ENV

      # Step 6: Build Docker Images
      - name: Build Docker images
        run: docker-compose build
        if: success()

      # Step 7: Tag and Push Docker Image to GitHub Container Registry
      - name: Tag and Push Docker Image to GitHub Container Registry
        run: |
          docker tag backend ghcr.io/${{ github.repository }}/backend:latest
          docker push ghcr.io/${{ github.repository }}/backend:latest
        if: success()

      # Step 8: Run Python Tests with Coverage
      - name: Run Python Tests with Coverage
        run: |
          docker-compose up -d
          sleep 10 # Esperar a que los servicios est√©n listos
          docker-compose exec backend pytest --cov=src --cov-fail-under=85 --maxfail=1 --disable-warnings

      # Step 9: Upload test artifacts
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ./test-results/  # Reemplaza con la ruta de tus resultados de prueba
