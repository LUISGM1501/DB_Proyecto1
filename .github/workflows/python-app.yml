name: Docker Build and Python Tests

on:
  workflow_dispatch:

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose -y

      # Step 4: Set environment variables from GitHub Secrets
      - name: Set Environment Variables
        run: |
          echo "DB_HOST_POSTGRES=postgres" >> $GITHUB_ENV
          echo "DB_PORT_POSTGRES=5432" >> $GITHUB_ENV
          echo "DB_HOST_MONGO=mongodb" >> $GITHUB_ENV
          echo "DB_PORT_MONGO=27017" >> $GITHUB_ENV
          echo "DB_USER=myuser" >> $GITHUB_ENV
          echo "DB_PASSWORD=mypassword" >> $GITHUB_ENV
          echo "JWT_SECRET=supersecretkey" >> $GITHUB_ENV
          echo "REDIS_HOST=redis" >> $GITHUB_ENV
          echo "REDIS_PORT=6379" >> $GITHUB_ENV

      # Step 5: Run Python Tests with Coverage (Ensure coverage > 85%)
      - name: Run Python Tests with Coverage
        run: |
          docker-compose up -d
          sleep 10 # Wait for services to start
          docker-compose exec backend pytest --cov=src --cov-fail-under=85 --maxfail=1 --disable-warnings
        env:
          DB_HOST_POSTGRES: postgres
          DB_PORT_POSTGRES: 5432
          DB_HOST_MONGO: mongodb
          DB_PORT_MONGO: 27017
          DB_USER: myuser
          DB_PASSWORD: mypassword
          JWT_SECRET: supersecretkey
          REDIS_HOST: redis
          REDIS_PORT: 6379

      # Step 6: Build Docker Images (only if tests and coverage > 85% pass)
      - name: Build Docker images
        if: steps.python-tests.conclusion == 'success'
        run: docker-compose build

      # Step 7: Log in to GitHub Container Registry (only if the build succeeds)
      - name: Log in to GitHub Container Registry
        if: steps.python-tests.conclusion == 'success'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 8: Tag and Push Docker Image to GitHub Container Registry
      - name: Tag and Push Docker Image to GitHub Container Registry
        if: steps.python-tests.conclusion == 'success'
        run: |
          docker tag backend ghcr.io/${{ github.repository }}/backend:latest
          docker push ghcr.io/${{ github.repository }}/backend:latest

      # Step 9: Upload test artifacts (using upload-artifact v4)
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ./test-results/  # Replace with the path to your test results

